{
function test (a) {
  var chr = CHR()

  chr.mem(1,1)
  chr.mem(2,a)
  chr.mem(3,0)
  chr.prog_counter(1)
  chr.prog(1,2,'add',1,3)
  chr.prog(2,3,'sub',1,2)
  chr.prog(3,1,'cjump',2,4)
  chr.prog(4,0,'halt',0)

  //console.log('done')
  console.log(chr.Store.toString())
}

test(parseInt(process.argv[2]))
}

prog(L,L1,'add',B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> 
    mem(A,X+Y), prog_counter(L1)

prog(L,L1,'sub',B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> 
    mem(A,X-Y), prog_counter(L1)

prog(L,L1,'mult',B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> 
    mem(A,X*Y), prog_counter(L1)

prog(L,L1,'div',B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> 
    mem(A,X/Y >> 0), prog_counter(L1)


prog(L,L1,'move',B,A), mem(B,X) \ mem(A,QQ), prog_counter(L) <=> 
    mem(A,X), prog_counter(L1)

prog(L,L1,'i_move',B,A), mem(B,C), mem(C,X) \ mem(A,QQ), prog_counter(L) <=> 
    mem(A,X), prog_counter(L1)

prog(L,L1,'i_move',B,A), mem(B,X), mem(A,C) \ mem(C,QQ), prog_counter(L) <=> 
    mem(C,X), prog_counter(L1)

prog(L,L1,'const',B,A) \ mem(A,QQ), prog_counter(L) <=> 
    Const === 'const' | mem(A,B), prog_counter(L1)

prog(L,QQ,'jump',A) \ prog_counter(L) <=> 
    prog_counter(A)

prog(L,QQ,'cjump',R1,A), mem(R2,X) \ prog_counter(L) <=> X === 0, R1 === R2 |
    prog_counter(A)

prog(L,L1,'cjump',R1,QQ), mem(R2,X) \ prog_counter(L) <=> X !== 0, R1 === R2 |
    prog_counter(L1)

prog(L,A,'halt',B) \ prog_counter(L) <=> true
